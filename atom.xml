<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Here&#39;s adorable~</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-05-27T14:19:42.381Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>bitQian</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>what do you do</title>
    <link href="http://example.com/post/42361/"/>
    <id>http://example.com/post/42361/</id>
    <published>2021-05-25T09:50:02.000Z</published>
    <updated>2021-05-27T14:19:42.381Z</updated>
    
    <content type="html"><![CDATA[<div id="app"><el-button type="text" v-if="hrefVisible" @click="open">I'm coming back..</el-button>{{ sharing }}<label v-if="hrefVisible">很小声, 用了vue, 貌似和主题不兼容.. 请刷新页面。</label></div><script>    function cssOnload(url){        var head=document.getElementsByTagName("head");        var es=document.createElement("link");        es.href=url;        es.rel="stylesheet";        es.type="text/css";        head[0].appendChild(es);    }     cssOnload('https://cdn.jsdelivr.net/npm/element-ui@2.15.1/lib/theme-chalk/index.css');    function loadJs(url, callback) {        var done = false;        var script = document.createElement('script');        script.type = 'text/javascript';//do not 'application/javascript',because Low version of the browser is not compatible        script.language = 'javascript';        script.charset = "utf-8";        script.src = url;        //script.setAttribute('src', url);        script.onload = script.onreadystatechange = function () {            if (!done && (!script.readyState || script.readyState == 'loaded' || script.readyState == 'complete')) {                done = true;                script.onload = script.onreadystatechange = null;                if (callback) {                    console.log('load ' + url + ' success.');                    callback.call(script);                }            }        };        document.getElementsByTagName("head")[0].appendChild(script);    };    loadJs('/js/md5.js', null)    loadJs('/js/vue.js', null);    loadJs('https://cdn.jsdelivr.net/npm/element-ui@2.15.1/lib/index.js', null);    loadJs('https://cdn.jsdelivr.net/npm/crypto-js@4.0.0/crypto-js.min.js', null);    loadJs('/js/webpack/vue-encrypt.js', null);</script><!-- https://www.jianshu.com/p/4c236d83ea04 -->]]></content>
    
    
      
      
    <summary type="html">&lt;div id=&quot;app&quot;&gt;

&lt;el-button type=&quot;text&quot; v-if=&quot;hrefVisible&quot; @click=&quot;open&quot;&gt;I&#39;m coming back..&lt;/el-button&gt;

{{ sharing }}

&lt;label v-if=&quot;hrefVisib</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>docker部署node项目</title>
    <link href="http://example.com/post/eo98e/"/>
    <id>http://example.com/post/eo98e/</id>
    <published>2021-05-08T12:04:36.000Z</published>
    <updated>2021-05-26T11:37:13.289Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-由来"><a href="#1-由来" class="headerlink" title="1. 由来"></a>1. 由来</h2><p>本人有一台aliyun服务器, 配置1core  2G。<del>心血来潮</del>(闲得发慌)解析了域名 <a href="https://blog.bitqian.cn"><del>blog.bitqian.cn</del> </a>。用了阿里云的<a href="https://www.aliyun.com/product/security/markets/aliyun/product/cas">免费ssl证书</a>，加nginx服务器配置ssl证书和端口转发。</p><p>然后环境是：centos7 + Git + Docker + Node镜像 + <a href="https://github.com/honjun/hexo-theme-sakura">hexo sakura主题博客</a>。对于博客主题，只要node适配就行了，把博客往node容器里面放。</p><p>这里不讲详细的搭建操作，只讲步骤和踩到的坑。</p><h2 id="2-步骤说明"><a href="#2-步骤说明" class="headerlink" title="2. 步骤说明"></a>2. 步骤说明</h2><pre><code class="markdown">1. 准备一个NodeJs支持的博客，上传到Linux服务器。我用了Git托管博客源码，方便在服务器上pull源码。2. 由于是Git托管, 为了拉取源码, 需要在centos配置Git SSH密钥。3. 安装Docker, 拉取到Node镜像。4. 启动NodeJs容器, 同时挂载博客的目录到容器的目录，还要映射端口，我的这个项目是运行在4000端口的，容器要暴露4000端口。5. 进入容器, 由于挂载了博客, 可以在容器中设置npm淘宝镜像，然后安装依赖，&lt;code&gt;nohup hexo s &amp;&lt;/code&gt; 启动项目。退出容器，项目就可以访问了。6. 到了第五步，博客需要带端口访问。使用nginx请求转发，监听443端口，博客就搭建完成了。</code></pre><h2 id="3-tips"><a href="#3-tips" class="headerlink" title="3. tips"></a>3. tips</h2><p>学到了一招。SSL端口加密。本来只能监听443 (<a href="https://example.com/">https://example.com/</a>) 的，我现在想要80也是加锁的状态 (<a href="http://example.com/">http://example.com</a>) 。之前只知道nginx来重写，现在可以用html文件跳转了，原理就是当用户访问80端口时，nginx转发到html文件，html跳转到https。百度就是类似这么干的。<code>curl baidu.com</code></p><p>html文件如下：</p><pre><code class="html">&lt;!-- director by meta...  --&gt;&lt;html&gt;&lt;meta http-equiv="refresh" content="0;url=https://blog.bitqian.cn/"&gt;&lt;/html&gt;</code></pre><p>nginx跳转如下:</p><pre><code class="shell">server {         listen 80;         server_name blog.bitqian.cn;         location / {                # index.html 在下面的目录下                root /home/your-website/;                index index.htm index.html;         }}</code></pre><p> 这么折腾下来，好处就是容器省资源；博客更新，<code>git pull</code> 就行，不需要<code>hexo s, hexo g, hexo d</code> 这么三连了。</p>]]></content>
    
    
    <summary type="html">NodeJs部署博客</summary>
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>send a luck</title>
    <link href="http://example.com/post/29592/"/>
    <id>http://example.com/post/29592/</id>
    <published>2021-04-09T13:19:37.000Z</published>
    <updated>2021-04-09T13:42:33.076Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>愿君能似月亭亭，千里伴君行。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;愿君能似月亭亭，千里伴君行。&lt;/p&gt;
&lt;/blockquote&gt;
</summary>
      
    
    
    
    <category term="生活" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>Java8函数式接口</title>
    <link href="http://example.com/post/51727/"/>
    <id>http://example.com/post/51727/</id>
    <published>2021-02-22T05:40:43.000Z</published>
    <updated>2021-04-03T02:07:27.522Z</updated>
    
    <content type="html"><![CDATA[<h2>Java8函数式接口</h2><p> 函数式接口有利于lambda表达式的编写和流式计算。在Java中定义了四种函数式接口，<code> Consumer </code> 消费型接口 有参无返,<code> Supplier </code> 供给型函数 无参有返，<code> Function </code> 函数式接口 有参有返，<code> Predicate </code> 断定型接口。 四大接口。接口参数和返回值只有一个。</p><p>下面T为类型的泛型，R为返回的泛型</p><h2 id="1-Consumer-lt-T-gt-消费型接口"><a href="#1-Consumer-lt-T-gt-消费型接口" class="headerlink" title="1. Consumer<T> 消费型接口"></a>1. Consumer&lt;T&gt; 消费型接口</h2><ol><li>匿名内部类实现</li></ol><pre><code class="java">// 消费型函数Consumer&lt;String&gt; consumer = new Consumer&lt;String&gt;() {    @Override    public void accept(String s) {        System.out.println("come in consumer type function..." + s);    }};</code></pre><ol><li>lambda演示</li></ol><pre><code class="java">private static void consumerDemo() {    Consumer&lt;String&gt; consumer = str -&gt; {        System.out.println("消费型函数 有参无返");        System.out.println(str);    };    // 调用consumber接口中的函数    consumer.accept("bitQian666");}</code></pre><h2 id="2-Supplier-lt-R-gt-供给型接口"><a href="#2-Supplier-lt-R-gt-供给型接口" class="headerlink" title="2. Supplier <R> 供给型接口"></a>2. Supplier &lt;R&gt; 供给型接口</h2><ol><li>匿名内部类实现</li></ol><pre><code class="java">// 供给型函数Supplier&lt;String&gt; supplier = new Supplier&lt;String&gt;() {    @Override    public String get() {        return null;    }};</code></pre><ol start="2"><li>lambda演示</li></ol><pre><code class="java">private static void supplierDemo() {    // 供给型函数    Supplier&lt;String&gt; supplier = () -&gt; "supplier 供给型函数 无参有返";    System.out.println(supplier.get());}</code></pre><h2 id="3-Function-lt-T-R-gt-函数型接口"><a href="#3-Function-lt-T-R-gt-函数型接口" class="headerlink" title="3. Function<T, R> 函数型接口"></a>3. Function&lt;T, R&gt; 函数型接口</h2><ol><li>匿名内部类实现</li></ol><pre><code class="java">// 函数型接口Function&lt;String, Integer&gt; function = new Function&lt;String, Integer&gt;() {    @Override    public Integer apply(String s) {        return null;    }};</code></pre><ol><li>lambda演示</li></ol><pre><code class="java">private static void functionDemo() {    // 函数型接口    Function&lt;String, Integer&gt; function = s -&gt; {        System.out.println("这是有参有返回的函数式接口!\t" + s);        return 666;    };    System.out.println(function.apply("hello function!"));}</code></pre><h2 id="4-Predicate-lt-T-gt-断定型接口"><a href="#4-Predicate-lt-T-gt-断定型接口" class="headerlink" title="4.  Predicate<T> 断定型接口"></a>4.  Predicate&lt;T&gt; 断定型接口</h2><ol><li>匿名内部类实现</li></ol><pre><code class="java">// 断定型接口Predicate&lt;String&gt; predicate = new Predicate&lt;String&gt;() {    // 参数是泛型 返回是boolean    // 调用test方法    @Override    public boolean test(String s) {        return false;    }};</code></pre><ol><li>lambda演示</li></ol><pre><code class="java">private static void predicateDemo() {    // 方法引用 判断输入的字符串 是否为空    Predicate&lt;String&gt; predicate = String::isEmpty;    System.out.println(predicate.test("hhh"));}</code></pre><h2 id="5-四大接口总结"><a href="#5-四大接口总结" class="headerlink" title="5. 四大接口总结"></a>5. 四大接口总结</h2><p><img src="https://img-blog.csdnimg.cn/20210222125703693.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2&gt;Java8函数式接口&lt;/h2&gt;

&lt;p&gt;
 函数式接口有利于lambda表达式的编写和流式计算。在Java中定义了四种函数式接口，&lt;code&gt; Consumer &lt;/code&gt; 消费型接口 有参无返,&lt;code&gt; Supplier &lt;/code&gt; 供给型函数 无参有返，&lt;</summary>
      
    
    
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>picture list</title>
    <link href="http://example.com/post/5/"/>
    <id>http://example.com/post/5/</id>
    <published>2021-02-12T10:02:10.000Z</published>
    <updated>2021-05-07T11:45:26.476Z</updated>
    
    <content type="html"><![CDATA[<h2 id="image-list-to-be-continued…"><a href="#image-list-to-be-continued…" class="headerlink" title="image list to be continued…"></a>image list to be continued…</h2><div>    <img src="https://cdn.jsdelivr.net/gh/sevenyoungairye/cdn/images/bg/33.jpg"></div><div>     <img src="https://cdn.jsdelivr.net/gh/sevenyoungairye/cdn/images/bg/44.jpg"></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;image-list-to-be-continued…&quot;&gt;&lt;a href=&quot;#image-list-to-be-continued…&quot; class=&quot;headerlink&quot; title=&quot;image list to be continued…&quot;&gt;&lt;/a&gt;image</summary>
      
    
    
    
    
    <category term="图集" scheme="http://example.com/tags/%E5%9B%BE%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>book list</title>
    <link href="http://example.com/post/4/"/>
    <id>http://example.com/post/4/</id>
    <published>2021-02-12T08:02:20.000Z</published>
    <updated>2021-05-07T11:45:22.607Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2021-02-12"><a href="#2021-02-12" class="headerlink" title="2021/02/12"></a>2021/02/12</h2><pre><code class="markdown">《小王子》《送你一匹野马》</code></pre>]]></content>
    
    
    <summary type="html">hhh</summary>
    
    
    
    
    <category term="悦读" scheme="http://example.com/tags/%E6%82%A6%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>nginx 动静分离</title>
    <link href="http://example.com/post/3/"/>
    <id>http://example.com/post/3/</id>
    <published>2021-02-12T08:02:16.000Z</published>
    <updated>2021-05-07T11:45:02.366Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是动静分离？what"><a href="#什么是动静分离？what" class="headerlink" title="什么是动静分离？what"></a>什么是动静分离？what</h4><ul><li>静态资源：当用户多次访问这个资源，资源的源代码永远不会改变的资源。</li><li>动态资源：当用户多次访问这个资源，资源的源代码可能会发生改变。</li></ul><p>动静分离是让动态网站里的动态网页根据一定规则吧不变的资源和经常变的资源区分开来，动态资源做好了拆分以后，我们就可以根据静态资源的特点将其做缓存操作，这就是网站静态化处理的核心思路。</p><ul><li>动静分离简单的概括就是：动态文件和静态文件的分离。</li><li>伪静态：网站如果相被搜索引擎搜索到，动态页面静态技术 freemarker等模板引擎技术。</li></ul><p>我们知道了 什么是动静分离了，那我们为什么要用他呢？</p><h4 id="为什么会用到动静分离-why"><a href="#为什么会用到动静分离-why" class="headerlink" title="为什么会用到动静分离 why"></a>为什么会用到动静分离 why</h4><ul><li>在日常开发中 有一些 请求是需要我们后台处理的 如：(.json，.do，.xml 等…)，有些请求是不需要通过后台处理的如：(css，html，jpg，js 等…)，这些不需要经过后台处理的文件称之为 “静态文件”，否则动态文件。因此我们后台处理忽略静态文件。这时 就会有一个概念：后台直接忽略静态文件不就得了。当然这是可以的，但是这样后台请求次数就明显增多了。在我们对资源的响应速度有要求的时候，我们应该使用这种动静分离的策略去解决。</li><li>动静分离将网站静态资源（HTML，JavaScript，CSS，Img等文件）与后台应用分开部署，提高用户访问静态代码的速度，降低对后台英勇的访问。这里我们将静态资源放到 <code>Nginx</code>中，动态资源转发到Tomact服务器中。</li><li>因此，动态资源转发到 tomcat服务器我们就使用到了前面讲到的反向代理了。</li></ul><h4 id="Nginx实现动静分离"><a href="#Nginx实现动静分离" class="headerlink" title="Nginx实现动静分离"></a>Nginx实现动静分离</h4><p>架构分析</p><p><img src="https://img-blog.csdnimg.cn/20200517133353684.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY4NTg2OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h4><p>修改nginx.conf配置，其中第一个location负责处理后台请求，第二个负责处理静态资源，如下所示。</p><pre><code class="yaml">worker_processes  1;events {    worker_connections  1024;}http {   server {       listen       10000;       server_name  localhost;            #拦截后台请求      location / {        proxy_pass http://localhost:8888;        proxy_set_header X-Real-IP $remote_addr;      }      #拦截静态资源      location ~ .*\.(html|htm|gif|jpg|jpeg|bmp|png|ico|js|css)$ {        root /Users/dalaoyang/Downloads/static;       }    }}</code></pre><h4 id="动静分离与前后分离区别"><a href="#动静分离与前后分离区别" class="headerlink" title="动静分离与前后分离区别:"></a>动静分离与前后分离区别:</h4><p>动静分离动态资源与静态资源分离，不会部署在同一台服务器上。<br>前后分离:网站架构模式，微服务开发基于SOA面向于服务器开发，后台和前端都采用调用接口方式。将一个项目拆分成一个控制Web(前端)和接口(后端),最终使用rpc远程调用技术。视图层和业务逻辑层拆分，中间采用RPC远程调用技术</p><p><a href="https://www.cnblogs.com/haoworld/p/nginx-shi-xian-dong-jing-fen-li.html">参考</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;什么是动静分离？what&quot;&gt;&lt;a href=&quot;#什么是动静分离？what&quot; class=&quot;headerlink&quot; title=&quot;什么是动静分离？what&quot;&gt;&lt;/a&gt;什么是动静分离？what&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;静态资源：当用户多次访问这个资源，资源的源代码永</summary>
      
    
    
    
    <category term="转载" scheme="http://example.com/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
  </entry>
  
  <entry>
    <title>偷得浮生半日闲</title>
    <link href="http://example.com/post/2/"/>
    <id>http://example.com/post/2/</id>
    <published>2021-02-12T08:02:10.000Z</published>
    <updated>2021-05-07T11:45:16.840Z</updated>
    
    
    <summary type="html">(≧∀≦)ゞ</summary>
    
    
    
    <category term="随想" scheme="http://example.com/categories/%E9%9A%8F%E6%83%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>链接推荐</title>
    <link href="http://example.com/post/1/"/>
    <id>http://example.com/post/1/</id>
    <published>2021-02-12T08:02:06.000Z</published>
    <updated>2021-05-07T11:45:11.407Z</updated>
    
    <content type="html"><![CDATA[<h2><a href="https://github.com">好的开源项目直达。</a></h2>]]></content>
    
    
    <summary type="html">GitHub</summary>
    
    
    
    <category term="资源" scheme="http://example.com/categories/%E8%B5%84%E6%BA%90/"/>
    
    
  </entry>
  
  <entry>
    <title>find a job</title>
    <link href="http://example.com/post/54465/"/>
    <id>http://example.com/post/54465/</id>
    <published>2021-02-12T08:02:02.000Z</published>
    <updated>2021-05-07T11:40:59.838Z</updated>
    
    <content type="html"><![CDATA[<h3 align="center">干面试题中。</h3>]]></content>
    
    
    <summary type="html">for $, ￥</summary>
    
    
    
    <category term="生活" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>木寸上</title>
    <link href="http://example.com/post/8a97/"/>
    <id>http://example.com/post/8a97/</id>
    <published>2020-12-18T07:12:45.000Z</published>
    <updated>2021-05-07T11:47:25.486Z</updated>
    
    <content type="html"><![CDATA[<p>　“最最喜欢你，绿子。”</p><p>　“什么程度？”</p><p>　<font color="pink">“像喜欢春天的熊一样。”</font></p>]]></content>
    
    
    <summary type="html">木寸上</summary>
    
    
    
    <category term="悦读" scheme="http://example.com/categories/%E6%82%A6%E8%AF%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>hexo &amp; github 搭建博客</title>
    <link href="http://example.com/post/983a/"/>
    <id>http://example.com/post/983a/</id>
    <published>2020-12-17T14:12:11.000Z</published>
    <updated>2021-05-07T11:47:30.879Z</updated>
    
    <content type="html"><![CDATA[<h4>adorable here~</h4>]]></content>
    
    
    <summary type="html">使用hexo &amp; git &amp; node &amp; github build ..</summary>
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/post/3eeb/"/>
    <id>http://example.com/post/3eeb/</id>
    <published>2020-12-17T13:12:55.000Z</published>
    <updated>2021-05-08T13:32:32.499Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new "My New Post"</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="fast-tips"><a href="#fast-tips" class="headerlink" title="fast tips"></a>fast tips</h3><p>Create a post in exactly file path..<br>So the file is ‘hello-world.md’ and the title is ‘hello-world’.</p><pre><code class="bash">$ hexo new page --path _posts/2021/05/08/hello-world "hello-world"$ hexo new post --path 2021/05/08/hello-world "hello-world"</code></pre>]]></content>
    
    
    <summary type="html">how to use hexo</summary>
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
</feed>
