<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Here&#39;s adorable~</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-04-09T13:42:33.076Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>bitQian</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>send a luck</title>
    <link href="http://example.com/post/29592.html"/>
    <id>http://example.com/post/29592.html</id>
    <published>2021-04-09T13:19:37.000Z</published>
    <updated>2021-04-09T13:42:33.076Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>愿君能似月亭亭，千里伴君行。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;愿君能似月亭亭，千里伴君行。&lt;/p&gt;
&lt;/blockquote&gt;
</summary>
      
    
    
    
    <category term="生活" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>Java8函数式接口</title>
    <link href="http://example.com/post/51727.html"/>
    <id>http://example.com/post/51727.html</id>
    <published>2021-02-22T05:40:43.000Z</published>
    <updated>2021-04-03T02:07:27.522Z</updated>
    
    <content type="html"><![CDATA[<h2>Java8函数式接口</h2><p> 函数式接口有利于lambda表达式的编写和流式计算。在Java中定义了四种函数式接口，<code> Consumer </code> 消费型接口 有参无返,<code> Supplier </code> 供给型函数 无参有返，<code> Function </code> 函数式接口 有参有返，<code> Predicate </code> 断定型接口。 四大接口。接口参数和返回值只有一个。</p><p>下面T为类型的泛型，R为返回的泛型</p><h2 id="1-Consumer-lt-T-gt-消费型接口"><a href="#1-Consumer-lt-T-gt-消费型接口" class="headerlink" title="1. Consumer<T> 消费型接口"></a>1. Consumer&lt;T&gt; 消费型接口</h2><ol><li>匿名内部类实现</li></ol><pre><code class="java">// 消费型函数Consumer&lt;String&gt; consumer = new Consumer&lt;String&gt;() {    @Override    public void accept(String s) {        System.out.println("come in consumer type function..." + s);    }};</code></pre><ol><li>lambda演示</li></ol><pre><code class="java">private static void consumerDemo() {    Consumer&lt;String&gt; consumer = str -&gt; {        System.out.println("消费型函数 有参无返");        System.out.println(str);    };    // 调用consumber接口中的函数    consumer.accept("bitQian666");}</code></pre><h2 id="2-Supplier-lt-R-gt-供给型接口"><a href="#2-Supplier-lt-R-gt-供给型接口" class="headerlink" title="2. Supplier <R> 供给型接口"></a>2. Supplier &lt;R&gt; 供给型接口</h2><ol><li>匿名内部类实现</li></ol><pre><code class="java">// 供给型函数Supplier&lt;String&gt; supplier = new Supplier&lt;String&gt;() {    @Override    public String get() {        return null;    }};</code></pre><ol start="2"><li>lambda演示</li></ol><pre><code class="java">private static void supplierDemo() {    // 供给型函数    Supplier&lt;String&gt; supplier = () -&gt; "supplier 供给型函数 无参有返";    System.out.println(supplier.get());}</code></pre><h2 id="3-Function-lt-T-R-gt-函数型接口"><a href="#3-Function-lt-T-R-gt-函数型接口" class="headerlink" title="3. Function<T, R> 函数型接口"></a>3. Function&lt;T, R&gt; 函数型接口</h2><ol><li>匿名内部类实现</li></ol><pre><code class="java">// 函数型接口Function&lt;String, Integer&gt; function = new Function&lt;String, Integer&gt;() {    @Override    public Integer apply(String s) {        return null;    }};</code></pre><ol><li>lambda演示</li></ol><pre><code class="java">private static void functionDemo() {    // 函数型接口    Function&lt;String, Integer&gt; function = s -&gt; {        System.out.println("这是有参有返回的函数式接口!\t" + s);        return 666;    };    System.out.println(function.apply("hello function!"));}</code></pre><h2 id="4-Predicate-lt-T-gt-断定型接口"><a href="#4-Predicate-lt-T-gt-断定型接口" class="headerlink" title="4.  Predicate<T> 断定型接口"></a>4.  Predicate&lt;T&gt; 断定型接口</h2><ol><li>匿名内部类实现</li></ol><pre><code class="java">// 断定型接口Predicate&lt;String&gt; predicate = new Predicate&lt;String&gt;() {    // 参数是泛型 返回是boolean    // 调用test方法    @Override    public boolean test(String s) {        return false;    }};</code></pre><ol><li>lambda演示</li></ol><pre><code class="java">private static void predicateDemo() {    // 方法引用 判断输入的字符串 是否为空    Predicate&lt;String&gt; predicate = String::isEmpty;    System.out.println(predicate.test("hhh"));}</code></pre><h2 id="5-四大接口总结"><a href="#5-四大接口总结" class="headerlink" title="5. 四大接口总结"></a>5. 四大接口总结</h2><p><img src="https://img-blog.csdnimg.cn/20210222125703693.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2&gt;Java8函数式接口&lt;/h2&gt;

&lt;p&gt;
 函数式接口有利于lambda表达式的编写和流式计算。在Java中定义了四种函数式接口，&lt;code&gt; Consumer &lt;/code&gt; 消费型接口 有参无返,&lt;code&gt; Supplier &lt;/code&gt; 供给型函数 无参有返，&lt;</summary>
      
    
    
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>picture list</title>
    <link href="http://example.com/post/5.html"/>
    <id>http://example.com/post/5.html</id>
    <published>2021-02-12T10:35:53.020Z</published>
    <updated>2021-02-14T02:50:03.901Z</updated>
    
    <content type="html"><![CDATA[<h2 id="image-list-to-be-continued…"><a href="#image-list-to-be-continued…" class="headerlink" title="image list to be continued…"></a>image list to be continued…</h2><div>    <img src="https://cdn.jsdelivr.net/gh/sevenyoungairye/cdn/images/bg/33.jpg"></div><div>     <img src="https://cdn.jsdelivr.net/gh/sevenyoungairye/cdn/images/bg/44.jpg"></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;image-list-to-be-continued…&quot;&gt;&lt;a href=&quot;#image-list-to-be-continued…&quot; class=&quot;headerlink&quot; title=&quot;image list to be continued…&quot;&gt;&lt;/a&gt;image</summary>
      
    
    
    
    
    <category term="图集" scheme="http://example.com/tags/%E5%9B%BE%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>book list</title>
    <link href="http://example.com/post/4.html"/>
    <id>http://example.com/post/4.html</id>
    <published>2021-02-12T08:52:19.599Z</published>
    <updated>2021-04-03T02:12:35.445Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2021-02-12"><a href="#2021-02-12" class="headerlink" title="2021/02/12"></a>2021/02/12</h2><pre><code class="markdown">《小王子》《送你一匹野马》</code></pre>]]></content>
    
    
    <summary type="html">hhh</summary>
    
    
    
    
    <category term="悦读" scheme="http://example.com/tags/%E6%82%A6%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>nginx 动静分离</title>
    <link href="http://example.com/post/3.html"/>
    <id>http://example.com/post/3.html</id>
    <published>2021-02-12T08:47:36.181Z</published>
    <updated>2021-02-14T04:04:31.224Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是动静分离？what"><a href="#什么是动静分离？what" class="headerlink" title="什么是动静分离？what"></a>什么是动静分离？what</h4><ul><li>静态资源：当用户多次访问这个资源，资源的源代码永远不会改变的资源。</li><li>动态资源：当用户多次访问这个资源，资源的源代码可能会发生改变。</li></ul><p>动静分离是让动态网站里的动态网页根据一定规则吧不变的资源和经常变的资源区分开来，动态资源做好了拆分以后，我们就可以根据静态资源的特点将其做缓存操作，这就是网站静态化处理的核心思路。</p><ul><li>动静分离简单的概括就是：动态文件和静态文件的分离。</li><li>伪静态：网站如果相被搜索引擎搜索到，动态页面静态技术 freemarker等模板引擎技术。</li></ul><p>我们知道了 什么是动静分离了，那我们为什么要用他呢？</p><h4 id="为什么会用到动静分离-why"><a href="#为什么会用到动静分离-why" class="headerlink" title="为什么会用到动静分离 why"></a>为什么会用到动静分离 why</h4><ul><li>在日常开发中 有一些 请求是需要我们后台处理的 如：(.json，.do，.xml 等…)，有些请求是不需要通过后台处理的如：(css，html，jpg，js 等…)，这些不需要经过后台处理的文件称之为 “静态文件”，否则动态文件。因此我们后台处理忽略静态文件。这时 就会有一个概念：后台直接忽略静态文件不就得了。当然这是可以的，但是这样后台请求次数就明显增多了。在我们对资源的响应速度有要求的时候，我们应该使用这种动静分离的策略去解决。</li><li>动静分离将网站静态资源（HTML，JavaScript，CSS，Img等文件）与后台应用分开部署，提高用户访问静态代码的速度，降低对后台英勇的访问。这里我们将静态资源放到 <code>Nginx</code>中，动态资源转发到Tomact服务器中。</li><li>因此，动态资源转发到 tomcat服务器我们就使用到了前面讲到的反向代理了。</li></ul><h4 id="Nginx实现动静分离"><a href="#Nginx实现动静分离" class="headerlink" title="Nginx实现动静分离"></a>Nginx实现动静分离</h4><p>架构分析</p><p><img src="https://img-blog.csdnimg.cn/20200517133353684.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY4NTg2OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h4><p>修改nginx.conf配置，其中第一个location负责处理后台请求，第二个负责处理静态资源，如下所示。</p><pre><code class="yaml">worker_processes  1;events {    worker_connections  1024;}http {   server {       listen       10000;       server_name  localhost;            #拦截后台请求      location / {        proxy_pass http://localhost:8888;        proxy_set_header X-Real-IP $remote_addr;      }      #拦截静态资源      location ~ .*\.(html|htm|gif|jpg|jpeg|bmp|png|ico|js|css)$ {        root /Users/dalaoyang/Downloads/static;       }    }}</code></pre><h4 id="动静分离与前后分离区别"><a href="#动静分离与前后分离区别" class="headerlink" title="动静分离与前后分离区别:"></a>动静分离与前后分离区别:</h4><p>动静分离动态资源与静态资源分离，不会部署在同一台服务器上。<br>前后分离:网站架构模式，微服务开发基于SOA面向于服务器开发，后台和前端都采用调用接口方式。将一个项目拆分成一个控制Web(前端)和接口(后端),最终使用rpc远程调用技术。视图层和业务逻辑层拆分，中间采用RPC远程调用技术</p><p><a href="https://www.cnblogs.com/haoworld/p/nginx-shi-xian-dong-jing-fen-li.html">参考</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;什么是动静分离？what&quot;&gt;&lt;a href=&quot;#什么是动静分离？what&quot; class=&quot;headerlink&quot; title=&quot;什么是动静分离？what&quot;&gt;&lt;/a&gt;什么是动静分离？what&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;静态资源：当用户多次访问这个资源，资源的源代码永</summary>
      
    
    
    
    <category term="转载" scheme="http://example.com/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
  </entry>
  
  <entry>
    <title>偷得浮生半日闲</title>
    <link href="http://example.com/post/2.html"/>
    <id>http://example.com/post/2.html</id>
    <published>2021-02-12T08:47:07.926Z</published>
    <updated>2021-02-14T02:11:31.642Z</updated>
    
    
    <summary type="html">(≧∀≦)ゞ</summary>
    
    
    
    <category term="随想" scheme="http://example.com/categories/%E9%9A%8F%E6%83%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>链接推荐</title>
    <link href="http://example.com/post/1.html"/>
    <id>http://example.com/post/1.html</id>
    <published>2021-02-12T08:45:48.174Z</published>
    <updated>2021-02-14T02:10:09.804Z</updated>
    
    <content type="html"><![CDATA[<h2><a href="https://github.com">好的开源项目直达。</a></h2>]]></content>
    
    
    <summary type="html">GitHub</summary>
    
    
    
    <category term="资源" scheme="http://example.com/categories/%E8%B5%84%E6%BA%90/"/>
    
    
  </entry>
  
  <entry>
    <title>find a job</title>
    <link href="http://example.com/post/54465.html"/>
    <id>http://example.com/post/54465.html</id>
    <published>2021-02-12T08:45:39.823Z</published>
    <updated>2021-02-14T02:00:14.650Z</updated>
    
    <content type="html"><![CDATA[<h3 align="center">干面试题中。</h3>]]></content>
    
    
    <summary type="html">for $, ￥</summary>
    
    
    
    <category term="生活" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>木寸上</title>
    <link href="http://example.com/post/8a97.html"/>
    <id>http://example.com/post/8a97.html</id>
    <published>2020-12-18T07:25:20.487Z</published>
    <updated>2021-02-11T08:51:45.783Z</updated>
    
    <content type="html"><![CDATA[<p>　“最最喜欢你，绿子。”</p><p>　“什么程度？”</p><p>　<font color="pink">“像喜欢春天的熊一样。”</font></p>]]></content>
    
    
    <summary type="html">木寸上</summary>
    
    
    
    <category term="悦读" scheme="http://example.com/categories/%E6%82%A6%E8%AF%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>hexo &amp; github 搭建博客</title>
    <link href="http://example.com/post/983a.html"/>
    <id>http://example.com/post/983a.html</id>
    <published>2020-12-17T14:17:43.746Z</published>
    <updated>2021-02-11T08:51:45.777Z</updated>
    
    <content type="html"><![CDATA[<h4>adorable here~</h4>]]></content>
    
    
    <summary type="html">使用hexo &amp; git &amp; node &amp; github build ..</summary>
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/post/3eeb.html"/>
    <id>http://example.com/post/3eeb.html</id>
    <published>2020-12-17T13:42:39.912Z</published>
    <updated>2021-02-11T08:51:45.790Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new "My New Post"</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">how to use hexo</summary>
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
</feed>
