{"meta":{"title":"Here's adorable~","subtitle":"","description":"bitQian's blog. Java&Linux&Node","author":"bitQian","url":"http://example.com","root":"/"},"pages":[{"title":"about","date":"2021-02-11T08:34:08.000Z","updated":"2021-02-14T01:53:47.107Z","comments":false,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"bitQian的小屋 与&nbsp; bitQian&nbsp; （ 真（ま）白（しろ） ） 对话中... bot_ui_ini()"},{"title":"links","date":"2021-02-11T08:36:21.000Z","updated":"2021-03-24T13:12:26.579Z","comments":true,"path":"links/index.html","permalink":"http://example.com/links/index.html","excerpt":"","text":""},{"title":"donate","date":"2021-02-11T13:18:43.000Z","updated":"2021-02-14T01:54:02.675Z","comments":false,"path":"donate/index.html","permalink":"http://example.com/donate/index.html","excerpt":"","text":""},{"title":"categories","date":"2020-12-18T12:07:37.000Z","updated":"2021-04-03T04:37:09.639Z","comments":false,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"留言板","date":"2021-02-12T07:49:47.000Z","updated":"2021-02-14T02:47:56.985Z","comments":true,"path":"comment/index.html","permalink":"http://example.com/comment/index.html","excerpt":"","text":"有什么想说的? 有什么想问的?"},{"title":"番剧","date":"2021-02-12T10:30:31.000Z","updated":"2021-02-12T10:34:06.103Z","comments":true,"path":"bangumi/index.html","permalink":"http://example.com/bangumi/index.html","excerpt":"","text":"《紫罗兰永恒花园》 《夏目友人帐》"},{"title":"project","date":"2021-02-12T08:19:19.000Z","updated":"2021-02-14T02:47:14.208Z","comments":true,"path":"project/index.html","permalink":"http://example.com/project/index.html","excerpt":"","text":"That's a secret, haha, they're in my GitHub. (/▽＼)"},{"title":"theme-sakura","date":"2021-02-12T07:34:08.000Z","updated":"2021-02-12T07:47:32.765Z","comments":true,"path":"theme-sakura/index.html","permalink":"http://example.com/theme-sakura/index.html","excerpt":"","text":"Sakuara主题 sakura document by hojun &amp; sakuara in GitHub sakuara plus"},{"title":"tags","date":"2020-12-18T12:09:35.000Z","updated":"2021-02-11T15:26:33.103Z","comments":false,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"music","date":"2021-02-12T10:41:11.000Z","updated":"2021-02-14T01:43:26.894Z","comments":true,"path":"music/index.html","permalink":"http://example.com/music/index.html","excerpt":"","text":"music list~"}],"posts":[{"title":"Java8函数式接口","slug":"2021/02/22/function-interface","date":"2021-02-22T05:40:43.000Z","updated":"2021-04-03T02:07:27.522Z","comments":true,"path":"post/51727.html","link":"","permalink":"http://example.com/post/51727.html","excerpt":"","text":"Java8函数式接口 函数式接口有利于lambda表达式的编写和流式计算。在Java中定义了四种函数式接口， Consumer 消费型接口 有参无返, Supplier 供给型函数 无参有返， Function 函数式接口 有参有返， Predicate 断定型接口。 四大接口。接口参数和返回值只有一个。 下面T为类型的泛型，R为返回的泛型 1. Consumer&lt;T&gt; 消费型接口 匿名内部类实现 // 消费型函数 Consumer&lt;String&gt; consumer = new Consumer&lt;String&gt;() { @Override public void accept(String s) { System.out.println(\"come in consumer type function...\" + s); } }; lambda演示 private static void consumerDemo() { Consumer&lt;String&gt; consumer = str -&gt; { System.out.println(\"消费型函数 有参无返\"); System.out.println(str); }; // 调用consumber接口中的函数 consumer.accept(\"bitQian666\"); } 2. Supplier &lt;R&gt; 供给型接口 匿名内部类实现 // 供给型函数 Supplier&lt;String&gt; supplier = new Supplier&lt;String&gt;() { @Override public String get() { return null; } }; lambda演示 private static void supplierDemo() { // 供给型函数 Supplier&lt;String&gt; supplier = () -&gt; \"supplier 供给型函数 无参有返\"; System.out.println(supplier.get()); } 3. Function&lt;T, R&gt; 函数型接口 匿名内部类实现 // 函数型接口 Function&lt;String, Integer&gt; function = new Function&lt;String, Integer&gt;() { @Override public Integer apply(String s) { return null; } }; lambda演示 private static void functionDemo() { // 函数型接口 Function&lt;String, Integer&gt; function = s -&gt; { System.out.println(\"这是有参有返回的函数式接口!\\t\" + s); return 666; }; System.out.println(function.apply(\"hello function!\")); } 4. Predicate&lt;T&gt; 断定型接口 匿名内部类实现 // 断定型接口 Predicate&lt;String&gt; predicate = new Predicate&lt;String&gt;() { // 参数是泛型 返回是boolean // 调用test方法 @Override public boolean test(String s) { return false; } }; lambda演示 private static void predicateDemo() { // 方法引用 判断输入的字符串 是否为空 Predicate&lt;String&gt; predicate = String::isEmpty; System.out.println(predicate.test(\"hhh\")); } 5. 四大接口总结","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"http://example.com/tags/Java/"}]},{"title":"picture list","slug":"2021/02/12/picture","date":"2021-02-12T10:35:53.020Z","updated":"2021-02-14T02:50:03.901Z","comments":true,"path":"post/5.html","link":"","permalink":"http://example.com/post/5.html","excerpt":"","text":"image list to be continued…","categories":[],"tags":[{"name":"图集","slug":"图集","permalink":"http://example.com/tags/%E5%9B%BE%E9%9B%86/"}]},{"title":"book list","slug":"2021/02/12/book","date":"2021-02-12T08:52:19.599Z","updated":"2021-04-03T02:12:35.445Z","comments":true,"path":"post/4.html","link":"","permalink":"http://example.com/post/4.html","excerpt":"","text":"2021/02/12《小王子》 《送你一匹野马》","categories":[],"tags":[{"name":"悦读","slug":"悦读","permalink":"http://example.com/tags/%E6%82%A6%E8%AF%BB/"}]},{"title":"nginx 动静分离","slug":"2021/02/12/04","date":"2021-02-12T08:47:36.181Z","updated":"2021-02-14T04:04:31.224Z","comments":true,"path":"post/3.html","link":"","permalink":"http://example.com/post/3.html","excerpt":"","text":"什么是动静分离？what 静态资源：当用户多次访问这个资源，资源的源代码永远不会改变的资源。 动态资源：当用户多次访问这个资源，资源的源代码可能会发生改变。 动静分离是让动态网站里的动态网页根据一定规则吧不变的资源和经常变的资源区分开来，动态资源做好了拆分以后，我们就可以根据静态资源的特点将其做缓存操作，这就是网站静态化处理的核心思路。 动静分离简单的概括就是：动态文件和静态文件的分离。 伪静态：网站如果相被搜索引擎搜索到，动态页面静态技术 freemarker等模板引擎技术。 我们知道了 什么是动静分离了，那我们为什么要用他呢？ 为什么会用到动静分离 why 在日常开发中 有一些 请求是需要我们后台处理的 如：(.json，.do，.xml 等…)，有些请求是不需要通过后台处理的如：(css，html，jpg，js 等…)，这些不需要经过后台处理的文件称之为 “静态文件”，否则动态文件。因此我们后台处理忽略静态文件。这时 就会有一个概念：后台直接忽略静态文件不就得了。当然这是可以的，但是这样后台请求次数就明显增多了。在我们对资源的响应速度有要求的时候，我们应该使用这种动静分离的策略去解决。 动静分离将网站静态资源（HTML，JavaScript，CSS，Img等文件）与后台应用分开部署，提高用户访问静态代码的速度，降低对后台英勇的访问。这里我们将静态资源放到 Nginx中，动态资源转发到Tomact服务器中。 因此，动态资源转发到 tomcat服务器我们就使用到了前面讲到的反向代理了。 Nginx实现动静分离架构分析 Nginx配置修改nginx.conf配置，其中第一个location负责处理后台请求，第二个负责处理静态资源，如下所示。 worker_processes 1; events { worker_connections 1024; } http { server { listen 10000; server_name localhost; #拦截后台请求 location / { proxy_pass http://localhost:8888; proxy_set_header X-Real-IP $remote_addr; } #拦截静态资源 location ~ .*\\.(html|htm|gif|jpg|jpeg|bmp|png|ico|js|css)$ { root /Users/dalaoyang/Downloads/static; } } } 动静分离与前后分离区别:动静分离动态资源与静态资源分离，不会部署在同一台服务器上。前后分离:网站架构模式，微服务开发基于SOA面向于服务器开发，后台和前端都采用调用接口方式。将一个项目拆分成一个控制Web(前端)和接口(后端),最终使用rpc远程调用技术。视图层和业务逻辑层拆分，中间采用RPC远程调用技术 参考","categories":[{"name":"转载","slug":"转载","permalink":"http://example.com/categories/%E8%BD%AC%E8%BD%BD/"}],"tags":[]},{"title":"偷得浮生半日闲","slug":"2021/02/12/03","date":"2021-02-12T08:47:07.926Z","updated":"2021-02-14T02:11:31.642Z","comments":true,"path":"post/2.html","link":"","permalink":"http://example.com/post/2.html","excerpt":"","text":"","categories":[{"name":"随想","slug":"随想","permalink":"http://example.com/categories/%E9%9A%8F%E6%83%B3/"}],"tags":[]},{"title":"链接推荐","slug":"2021/02/12/02","date":"2021-02-12T08:45:48.174Z","updated":"2021-02-14T02:10:09.804Z","comments":true,"path":"post/1.html","link":"","permalink":"http://example.com/post/1.html","excerpt":"","text":"好的开源项目直达。","categories":[{"name":"资源","slug":"资源","permalink":"http://example.com/categories/%E8%B5%84%E6%BA%90/"}],"tags":[]},{"title":"find a job","slug":"2021/02/12/01","date":"2021-02-12T08:45:39.823Z","updated":"2021-02-14T02:00:14.650Z","comments":true,"path":"post/54465.html","link":"","permalink":"http://example.com/post/54465.html","excerpt":"","text":"干面试题中。","categories":[{"name":"生活","slug":"生活","permalink":"http://example.com/categories/%E7%94%9F%E6%B4%BB/"}],"tags":[]},{"title":"木寸上","slug":"article-simple","date":"2020-12-18T07:25:20.487Z","updated":"2021-02-11T08:51:45.783Z","comments":true,"path":"post/8a97.html","link":"","permalink":"http://example.com/post/8a97.html","excerpt":"","text":"“最最喜欢你，绿子。” “什么程度？” “像喜欢春天的熊一样。”","categories":[{"name":"悦读","slug":"悦读","permalink":"http://example.com/categories/%E6%82%A6%E8%AF%BB/"}],"tags":[]},{"title":"hexo & github 搭建博客","slug":"first-blog","date":"2020-12-17T14:17:43.746Z","updated":"2021-02-11T08:51:45.777Z","comments":true,"path":"post/983a.html","link":"","permalink":"http://example.com/post/983a.html","excerpt":"","text":"adorable here~","categories":[{"name":"技术","slug":"技术","permalink":"http://example.com/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2020-12-17T13:42:39.912Z","updated":"2021-02-11T08:51:45.790Z","comments":true,"path":"post/3eeb.html","link":"","permalink":"http://example.com/post/3eeb.html","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new \"My New Post\" More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[{"name":"技术","slug":"技术","permalink":"http://example.com/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[]}],"categories":[{"name":"转载","slug":"转载","permalink":"http://example.com/categories/%E8%BD%AC%E8%BD%BD/"},{"name":"随想","slug":"随想","permalink":"http://example.com/categories/%E9%9A%8F%E6%83%B3/"},{"name":"资源","slug":"资源","permalink":"http://example.com/categories/%E8%B5%84%E6%BA%90/"},{"name":"生活","slug":"生活","permalink":"http://example.com/categories/%E7%94%9F%E6%B4%BB/"},{"name":"悦读","slug":"悦读","permalink":"http://example.com/categories/%E6%82%A6%E8%AF%BB/"},{"name":"技术","slug":"技术","permalink":"http://example.com/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://example.com/tags/Java/"},{"name":"图集","slug":"图集","permalink":"http://example.com/tags/%E5%9B%BE%E9%9B%86/"},{"name":"悦读","slug":"悦读","permalink":"http://example.com/tags/%E6%82%A6%E8%AF%BB/"}]}