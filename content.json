{"meta":{"title":"Here's adorable~","subtitle":"","description":"bitQian's blog. Java&Linux&Node","author":"bitQian","url":"http://example.com","root":"/"},"pages":[{"title":"categories","date":"2020-12-18T12:07:37.000Z","updated":"2021-04-03T04:37:09.639Z","comments":false,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"番剧","date":"2021-02-12T10:30:31.000Z","updated":"2021-02-12T10:34:06.103Z","comments":true,"path":"bangumi/index.html","permalink":"http://example.com/bangumi/index.html","excerpt":"","text":"《紫罗兰永恒花园》 《夏目友人帐》"},{"title":"about","date":"2021-02-11T08:34:08.000Z","updated":"2021-05-25T14:59:47.848Z","comments":false,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"bitQian的小屋 与&nbsp; bitQian&nbsp; （ 真（ま）白（しろ） ） 对话中... bot_ui_ini()"},{"title":"donate","date":"2021-02-11T13:18:43.000Z","updated":"2021-02-14T01:54:02.675Z","comments":false,"path":"donate/index.html","permalink":"http://example.com/donate/index.html","excerpt":"","text":""},{"title":"links","date":"2021-02-11T08:36:21.000Z","updated":"2021-03-24T13:12:26.579Z","comments":true,"path":"links/index.html","permalink":"http://example.com/links/index.html","excerpt":"","text":""},{"title":"留言板","date":"2021-02-12T07:49:47.000Z","updated":"2021-02-14T02:47:56.985Z","comments":true,"path":"comment/index.html","permalink":"http://example.com/comment/index.html","excerpt":"","text":"有什么想说的? 有什么想问的?"},{"title":"project","date":"2021-02-12T08:19:19.000Z","updated":"2021-02-14T02:47:14.208Z","comments":true,"path":"project/index.html","permalink":"http://example.com/project/index.html","excerpt":"","text":"That's a secret, haha, they're in my GitHub. (/▽＼)"},{"title":"music","date":"2021-02-12T10:41:11.000Z","updated":"2021-02-14T01:43:26.894Z","comments":true,"path":"music/index.html","permalink":"http://example.com/music/index.html","excerpt":"","text":"music list~"},{"title":"tags","date":"2020-12-18T12:09:35.000Z","updated":"2021-02-11T15:26:33.103Z","comments":false,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"theme-sakura","date":"2021-02-12T07:34:08.000Z","updated":"2021-02-12T07:47:32.765Z","comments":true,"path":"theme-sakura/index.html","permalink":"http://example.com/theme-sakura/index.html","excerpt":"","text":"Sakuara主题 sakura document by hojun &amp; sakuara in GitHub sakuara plus"}],"posts":[{"title":"what do you do","slug":"2021/05/25/resignation","date":"2021-05-25T09:50:02.000Z","updated":"2021-05-26T13:27:06.044Z","comments":true,"path":"post/42361/","link":"","permalink":"http://example.com/post/42361/","excerpt":"","text":"I'm coming back.. {{ this.sharing }} 很小声, 用了vue, 貌似和主题不兼容.. 请刷新页面。 function globalShow() { var words = `Yx4uAUHooa7uOIDP6ID1FLpK2X3sLYXBK7YFXP+g3r/X5wvf9g1U4TqctIdj2PhqTXdqhpr0rA+uG2kUkXZ754yucwsEFWSGwKD2SUXqsfuhL3zBZe3jCayRwcD/nWNRwpKBGfNtQf+T/2zilDPUDkmFvHXiU5rxg61XN6IadgtmpOmtCQg+QApCQbD4tLMR6dGMsP1UxnDnSi0NUOGCO4DIc1lw73dJw9tOIVDXt37kgWC4+D8iUBNJkrC9Y7QbWs/KnI35nChthma1JP3VP1tgZLbJKKdv4Pz61GseZWWDjx2xF76pXcPeZuEJ1EoP+3xQi3Z0THaejlaQX4y7x9vX5lv+EH1Jkav6hGgfw4b7lcKrYPhBrplphc17Dvv0vQrv6dVBsdOZRdD8HOPBEq0w/XGjkJYU3f9pGNpdlBG/Xb3tVYRLInC0j7TO38HDppFjZ6PjqfvGwl24c1+U2PAUQwYIOrOPRt/FW09FjqB95nYket4EfcBsg5z7vdakfpq7eJ7zGNKFvv+HD6aF5kILtgFNvwRStd0Wt440nA1dWQJ80vQwbSWHxIZtSdccnlI4nqjmCT0Sd8t0NDtPEqgp0c4ka0wjxtsdmUVdJcn2PTlnRK5I/FLheEXsUIt6rmMj/BNWslUZbrLQOsIZYuhUtpiE3N0l0IiXigK9hHGo6XLbmOR42YqzW6mQJMXNESlsr4hxBlOJ3sc6RwfLy228FJc3OVtzgFdTthwED38c+2zDQKR7fhp1McSijns5HY08PyKizKvfJuZZFBgomKBBXBYMt+9X8KtD1gDQcQ8LfW5FqemLiRMQp+ilJRsmexggveKJpjw8bA3hwopQh/mb9244xG85hT1SB/gv0DvkP8J8zBmN7NshwT1Y/90eKNQ7UJkNNlZffoMTFBrxjrfx4Ccc3R7bU2nh1R063WC6jD4StoKL5UWQU2WwunEYpsm1J4VGZim9nE9cDkW51iUEWF4SHVE8QM4DRuRFlg3b5/MrTIGvHSV1UYJ9AyBvQgg+7bwN0dDzFMJUAT6h08UCmrTFv4GXcevpHyVLrY6S0K6DVBXDKWPCW076FhSCcNTY31DpUWermO6br65hNRGu2uVnrjfdyfLHXTmvRWA=` ; var app = new Vue({ el: '#app', data: { sharing: '', kk: '', k: 'ZJXt7/o1OQ52Ktl08lf2tA', hrefVisible: true, message: 'Hello Vue!' }, created() { setTimeout(() => { this.init(); }, 500) }, methods: { open() { this.$prompt('请输入密钥', '想看吗', { center: true, confirmButtonText: '确定', cancelButtonText: '取消', inputPattern: /\\d{4}/, inputErrorMessage: '密钥格式不正确' }).then(({ value }) => { var t = b64_md5(hex_md5(String(value))) if (t == this.k) { this.$message({ type: 'success', message: 'k right, congratulations!: ' + value }); this.kk = hex_md5(t.substr(0, 8)) this.sharing = CryptoJS.AES.decrypt(words, CryptoJS.enc.Utf8.parse(this.kk), { mode: CryptoJS.mode.ECB, padding: CryptoJS.pad.Pkcs7 }).toString(CryptoJS.enc.Utf8); this.hrefVisible = false; } else { this.$message({ type: 'error', message: `err, reject..` }) } }).catch(() => { this.$message({ type: 'info', message: '取消输入' }); }); }, notify() { this.$notify({ title: 'upset /(ㄒoㄒ)/~~', message: `{{{(>_ { globalShow(); }, 350)","categories":[],"tags":[]},{"title":"docker部署node项目","slug":"2021/05/08/docker-node-site","date":"2021-05-08T12:04:36.000Z","updated":"2021-05-26T11:37:13.289Z","comments":true,"path":"post/eo98e/","link":"","permalink":"http://example.com/post/eo98e/","excerpt":"","text":"1. 由来本人有一台aliyun服务器, 配置1core 2G。心血来潮(闲得发慌)解析了域名 blog.bitqian.cn 。用了阿里云的免费ssl证书，加nginx服务器配置ssl证书和端口转发。 然后环境是：centos7 + Git + Docker + Node镜像 + hexo sakura主题博客。对于博客主题，只要node适配就行了，把博客往node容器里面放。 这里不讲详细的搭建操作，只讲步骤和踩到的坑。 2. 步骤说明1. 准备一个NodeJs支持的博客，上传到Linux服务器。我用了Git托管博客源码，方便在服务器上pull源码。 2. 由于是Git托管, 为了拉取源码, 需要在centos配置Git SSH密钥。 3. 安装Docker, 拉取到Node镜像。 4. 启动NodeJs容器, 同时挂载博客的目录到容器的目录，还要映射端口，我的这个项目是运行在4000端口的，容器要暴露4000端口。 5. 进入容器, 由于挂载了博客, 可以在容器中设置npm淘宝镜像，然后安装依赖，&lt;code&gt;nohup hexo s &amp;&lt;/code&gt; 启动项目。退出容器，项目就可以访问了。 6. 到了第五步，博客需要带端口访问。使用nginx请求转发，监听443端口，博客就搭建完成了。 3. tips学到了一招。SSL端口加密。本来只能监听443 (https://example.com/) 的，我现在想要80也是加锁的状态 (http://example.com) 。之前只知道nginx来重写，现在可以用html文件跳转了，原理就是当用户访问80端口时，nginx转发到html文件，html跳转到https。百度就是类似这么干的。curl baidu.com html文件如下： &lt;!-- director by meta... --&gt; &lt;html&gt; &lt;meta http-equiv=\"refresh\" content=\"0;url=https://blog.bitqian.cn/\"&gt; &lt;/html&gt; nginx跳转如下: server { listen 80; server_name blog.bitqian.cn; location / { # index.html 在下面的目录下 root /home/your-website/; index index.htm index.html; } } 这么折腾下来，好处就是容器省资源；博客更新，git pull 就行，不需要hexo s, hexo g, hexo d 这么三连了。","categories":[{"name":"技术","slug":"技术","permalink":"http://example.com/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[]},{"title":"send a luck","slug":"2021/04/09/teammate","date":"2021-04-09T13:19:37.000Z","updated":"2021-04-09T13:42:33.076Z","comments":true,"path":"post/29592/","link":"","permalink":"http://example.com/post/29592/","excerpt":"","text":"愿君能似月亭亭，千里伴君行。","categories":[{"name":"生活","slug":"生活","permalink":"http://example.com/categories/%E7%94%9F%E6%B4%BB/"}],"tags":[]},{"title":"Java8函数式接口","slug":"2021/02/22/function-interface","date":"2021-02-22T05:40:43.000Z","updated":"2021-04-03T02:07:27.522Z","comments":true,"path":"post/51727/","link":"","permalink":"http://example.com/post/51727/","excerpt":"","text":"Java8函数式接口 函数式接口有利于lambda表达式的编写和流式计算。在Java中定义了四种函数式接口， Consumer 消费型接口 有参无返, Supplier 供给型函数 无参有返， Function 函数式接口 有参有返， Predicate 断定型接口。 四大接口。接口参数和返回值只有一个。 下面T为类型的泛型，R为返回的泛型 1. Consumer&lt;T&gt; 消费型接口 匿名内部类实现 // 消费型函数 Consumer&lt;String&gt; consumer = new Consumer&lt;String&gt;() { @Override public void accept(String s) { System.out.println(\"come in consumer type function...\" + s); } }; lambda演示 private static void consumerDemo() { Consumer&lt;String&gt; consumer = str -&gt; { System.out.println(\"消费型函数 有参无返\"); System.out.println(str); }; // 调用consumber接口中的函数 consumer.accept(\"bitQian666\"); } 2. Supplier &lt;R&gt; 供给型接口 匿名内部类实现 // 供给型函数 Supplier&lt;String&gt; supplier = new Supplier&lt;String&gt;() { @Override public String get() { return null; } }; lambda演示 private static void supplierDemo() { // 供给型函数 Supplier&lt;String&gt; supplier = () -&gt; \"supplier 供给型函数 无参有返\"; System.out.println(supplier.get()); } 3. Function&lt;T, R&gt; 函数型接口 匿名内部类实现 // 函数型接口 Function&lt;String, Integer&gt; function = new Function&lt;String, Integer&gt;() { @Override public Integer apply(String s) { return null; } }; lambda演示 private static void functionDemo() { // 函数型接口 Function&lt;String, Integer&gt; function = s -&gt; { System.out.println(\"这是有参有返回的函数式接口!\\t\" + s); return 666; }; System.out.println(function.apply(\"hello function!\")); } 4. Predicate&lt;T&gt; 断定型接口 匿名内部类实现 // 断定型接口 Predicate&lt;String&gt; predicate = new Predicate&lt;String&gt;() { // 参数是泛型 返回是boolean // 调用test方法 @Override public boolean test(String s) { return false; } }; lambda演示 private static void predicateDemo() { // 方法引用 判断输入的字符串 是否为空 Predicate&lt;String&gt; predicate = String::isEmpty; System.out.println(predicate.test(\"hhh\")); } 5. 四大接口总结","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"http://example.com/tags/Java/"}]},{"title":"picture list","slug":"2021/02/12/picture","date":"2021-02-12T10:02:10.000Z","updated":"2021-05-07T11:45:26.476Z","comments":true,"path":"post/5/","link":"","permalink":"http://example.com/post/5/","excerpt":"","text":"image list to be continued…","categories":[],"tags":[{"name":"图集","slug":"图集","permalink":"http://example.com/tags/%E5%9B%BE%E9%9B%86/"}]},{"title":"book list","slug":"2021/02/12/book","date":"2021-02-12T08:02:20.000Z","updated":"2021-05-07T11:45:22.607Z","comments":true,"path":"post/4/","link":"","permalink":"http://example.com/post/4/","excerpt":"","text":"2021/02/12《小王子》 《送你一匹野马》","categories":[],"tags":[{"name":"悦读","slug":"悦读","permalink":"http://example.com/tags/%E6%82%A6%E8%AF%BB/"}]},{"title":"nginx 动静分离","slug":"2021/02/12/04","date":"2021-02-12T08:02:16.000Z","updated":"2021-05-07T11:45:02.366Z","comments":true,"path":"post/3/","link":"","permalink":"http://example.com/post/3/","excerpt":"","text":"什么是动静分离？what 静态资源：当用户多次访问这个资源，资源的源代码永远不会改变的资源。 动态资源：当用户多次访问这个资源，资源的源代码可能会发生改变。 动静分离是让动态网站里的动态网页根据一定规则吧不变的资源和经常变的资源区分开来，动态资源做好了拆分以后，我们就可以根据静态资源的特点将其做缓存操作，这就是网站静态化处理的核心思路。 动静分离简单的概括就是：动态文件和静态文件的分离。 伪静态：网站如果相被搜索引擎搜索到，动态页面静态技术 freemarker等模板引擎技术。 我们知道了 什么是动静分离了，那我们为什么要用他呢？ 为什么会用到动静分离 why 在日常开发中 有一些 请求是需要我们后台处理的 如：(.json，.do，.xml 等…)，有些请求是不需要通过后台处理的如：(css，html，jpg，js 等…)，这些不需要经过后台处理的文件称之为 “静态文件”，否则动态文件。因此我们后台处理忽略静态文件。这时 就会有一个概念：后台直接忽略静态文件不就得了。当然这是可以的，但是这样后台请求次数就明显增多了。在我们对资源的响应速度有要求的时候，我们应该使用这种动静分离的策略去解决。 动静分离将网站静态资源（HTML，JavaScript，CSS，Img等文件）与后台应用分开部署，提高用户访问静态代码的速度，降低对后台英勇的访问。这里我们将静态资源放到 Nginx中，动态资源转发到Tomact服务器中。 因此，动态资源转发到 tomcat服务器我们就使用到了前面讲到的反向代理了。 Nginx实现动静分离架构分析 Nginx配置修改nginx.conf配置，其中第一个location负责处理后台请求，第二个负责处理静态资源，如下所示。 worker_processes 1; events { worker_connections 1024; } http { server { listen 10000; server_name localhost; #拦截后台请求 location / { proxy_pass http://localhost:8888; proxy_set_header X-Real-IP $remote_addr; } #拦截静态资源 location ~ .*\\.(html|htm|gif|jpg|jpeg|bmp|png|ico|js|css)$ { root /Users/dalaoyang/Downloads/static; } } } 动静分离与前后分离区别:动静分离动态资源与静态资源分离，不会部署在同一台服务器上。前后分离:网站架构模式，微服务开发基于SOA面向于服务器开发，后台和前端都采用调用接口方式。将一个项目拆分成一个控制Web(前端)和接口(后端),最终使用rpc远程调用技术。视图层和业务逻辑层拆分，中间采用RPC远程调用技术 参考","categories":[{"name":"转载","slug":"转载","permalink":"http://example.com/categories/%E8%BD%AC%E8%BD%BD/"}],"tags":[]},{"title":"偷得浮生半日闲","slug":"2021/02/12/03","date":"2021-02-12T08:02:10.000Z","updated":"2021-05-07T11:45:16.840Z","comments":true,"path":"post/2/","link":"","permalink":"http://example.com/post/2/","excerpt":"","text":"","categories":[{"name":"随想","slug":"随想","permalink":"http://example.com/categories/%E9%9A%8F%E6%83%B3/"}],"tags":[]},{"title":"链接推荐","slug":"2021/02/12/02","date":"2021-02-12T08:02:06.000Z","updated":"2021-05-07T11:45:11.407Z","comments":true,"path":"post/1/","link":"","permalink":"http://example.com/post/1/","excerpt":"","text":"好的开源项目直达。","categories":[{"name":"资源","slug":"资源","permalink":"http://example.com/categories/%E8%B5%84%E6%BA%90/"}],"tags":[]},{"title":"find a job","slug":"2021/02/12/01","date":"2021-02-12T08:02:02.000Z","updated":"2021-05-07T11:40:59.838Z","comments":true,"path":"post/54465/","link":"","permalink":"http://example.com/post/54465/","excerpt":"","text":"干面试题中。","categories":[{"name":"生活","slug":"生活","permalink":"http://example.com/categories/%E7%94%9F%E6%B4%BB/"}],"tags":[]},{"title":"木寸上","slug":"article-simple","date":"2020-12-18T07:12:45.000Z","updated":"2021-05-07T11:47:25.486Z","comments":true,"path":"post/8a97/","link":"","permalink":"http://example.com/post/8a97/","excerpt":"","text":"“最最喜欢你，绿子。” “什么程度？” “像喜欢春天的熊一样。”","categories":[{"name":"悦读","slug":"悦读","permalink":"http://example.com/categories/%E6%82%A6%E8%AF%BB/"}],"tags":[]},{"title":"hexo & github 搭建博客","slug":"first-blog","date":"2020-12-17T14:12:11.000Z","updated":"2021-05-07T11:47:30.879Z","comments":true,"path":"post/983a/","link":"","permalink":"http://example.com/post/983a/","excerpt":"","text":"adorable here~","categories":[{"name":"技术","slug":"技术","permalink":"http://example.com/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2020-12-17T13:12:55.000Z","updated":"2021-05-08T13:32:32.499Z","comments":true,"path":"post/3eeb/","link":"","permalink":"http://example.com/post/3eeb/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new \"My New Post\" More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment fast tipsCreate a post in exactly file path..So the file is ‘hello-world.md’ and the title is ‘hello-world’. $ hexo new page --path _posts/2021/05/08/hello-world \"hello-world\" $ hexo new post --path 2021/05/08/hello-world \"hello-world\"","categories":[{"name":"技术","slug":"技术","permalink":"http://example.com/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[]}],"categories":[{"name":"技术","slug":"技术","permalink":"http://example.com/categories/%E6%8A%80%E6%9C%AF/"},{"name":"生活","slug":"生活","permalink":"http://example.com/categories/%E7%94%9F%E6%B4%BB/"},{"name":"转载","slug":"转载","permalink":"http://example.com/categories/%E8%BD%AC%E8%BD%BD/"},{"name":"随想","slug":"随想","permalink":"http://example.com/categories/%E9%9A%8F%E6%83%B3/"},{"name":"资源","slug":"资源","permalink":"http://example.com/categories/%E8%B5%84%E6%BA%90/"},{"name":"悦读","slug":"悦读","permalink":"http://example.com/categories/%E6%82%A6%E8%AF%BB/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://example.com/tags/Java/"},{"name":"图集","slug":"图集","permalink":"http://example.com/tags/%E5%9B%BE%E9%9B%86/"},{"name":"悦读","slug":"悦读","permalink":"http://example.com/tags/%E6%82%A6%E8%AF%BB/"}]}